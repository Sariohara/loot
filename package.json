{
  "name": "loot",
  "author": "Oliver Hamlet <oliver.hamlet@gmail.com>",
  "version": "0.9.1",
  "license": "GPL-3.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/loot/loot.git"
  },
  "bugs": {
    "url": "https://github.com/loot/loot/issues"
  },
  "homepage": "https://github.com/loot/loot",
  "private": true,
  "dependencies": {
    "fs-extra": "^10.0.0",
    "replace": "^1.2.0"
  },
  "devDependencies": {
    "eslint": "^7.32.0",
    "eslint-config-airbnb": "^18.2.1",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^4.0.0",
    "prettier": "^2.4.1"
  },
  "scripts": {
    "lint": "eslint --ignore-path .gitignore --ext .js ."
  },
  "eslintConfig": {
    "env": {
      "node": true
    },
    "plugins": [
      "prettier"
    ],
    "extends": [
      "eslint:recommended",
      "airbnb",
      "prettier"
    ],
    "rules": {
      "curly": [
        "error",
        "all"
      ],
      "import/extensions": [
        "error",
        {
          "js": "ignorePackages"
        }
      ],
      "linebreak-style": "off",
      "max-classes-per-file": "off",
      "no-confusing-arrow": "error",
      "no-param-reassign": [
        "error",
        {
          "props": false
        }
      ],
      "no-restricted-syntax": [
        "error",
        {
          "selector": "ForInStatement",
          "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
        },
        {
          "selector": "LabeledStatement",
          "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
        },
        {
          "selector": "WithStatement",
          "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
        }
      ],
      "no-underscore-dangle": "off",
      "no-use-before-define": "off",
      "no-useless-constructor": "off",
      "prefer-destructuring": "off",
      "prettier/prettier": "error"
    }
  },
  "prettier": {
    "singleQuote": true,
    "trailingComma": "none",
    "arrowParens": "avoid",
    "endOfLine": "auto"
  }
}
